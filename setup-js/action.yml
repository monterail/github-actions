name: 'setup-js'
description: 'Setup Node, cache global and local node modules, install dependencies'
inputs:
  package-manager:
    required: false
    default: 'npm'
  install-command:
    required: false
  install-args:
    required: false
  hash-strategy:
    required: false
  cache-prefix:
    required: false
    default: 'v1'
  node-version:
    required: false
    default: 'lts/gallium'
  working-directory:
    required: false
    default: '.'
outputs:
  metadata-json-string:
    description: 'All metadata calculated for this action run'
    value: ${{ toJSON(steps.metadata.outputs) }}
runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node-version }}

    - uses: actions/github-script@v6
      id: metadata
      env:
        GITHUB_ACTION_PATH: ${{ github.action_path }}
      with:
        script: |
          const path = require('path');

          // path.format makes sure to format the path correctly
          // on windows
          const requireSource = path.format({
            dir: process.env.GITHUB_ACTION_PATH,
            base: 'get-meta.js',
          });

          const script = require(requireSource);

          script({
            github,
            core,
            inputs: ${{ toJSON(inputs) }},
            runsOn: '${{ runner.os }}',
          });

    - name: Get global cache directory
      shell: bash
      id: global-cache-dir
      run: echo "::set-output name=dir::$(${{ steps.metadata.outputs.get-cache-dir-command }})"

    - name: Restore node_modules cache
      uses: actions/cache@v3
      with:
        path: |
          ${{ steps.global-cache-dir.outputs.dir }}
          ${{ inputs.working-directory }}/node_modules
        key: ${{ steps.metadata.outputs.node-modules-cache-prefix }}-${{
          steps.metadata.outputs.hash-strategy == 'lockfile' &&
           hashFiles(steps.metadata.outputs.lockfile) || steps.metadata.outputs.dependencies-hash }}
        restore-keys: |
          ${{ steps.metadata.outputs.node-modules-cache-prefix }}

    - name: Print package manager version
      run: ${{ steps.metadata.outputs.package-manager-version-command }}
      shell: bash

    - name: Install npm packages
      run: ${{ steps.metadata.outputs.install-command }} ${{ inputs.install-args }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
